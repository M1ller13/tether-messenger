#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints Go —Å–µ—Ä–≤–µ—Ä–∞.
"""

import requests
import json
import os
import random

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
os.environ['NO_PROXY'] = 'localhost,127.0.0.1'

BASE_URL = "http://localhost:8081"

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
username = f"testuser_{random.randint(1000, 9999)}"
password = "testpassword"

def test_health():
    """–¢–µ—Å—Ç health check endpoint"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É—é health check...")
    try:
        response = requests.get(f"{BASE_URL}/health", proxies={'http': None, 'https': None})
        print(f"‚úÖ Health check: {response.status_code} - {response.json()}")
        return True
    except Exception as e:
        print(f"‚ùå Health check failed: {e}")
        return False

def test_register():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...")
    try:
        data = {
            "username": username,
            "password": password
        }
        response = requests.post(f"{BASE_URL}/api/auth/register", json=data, proxies={'http': None, 'https': None})
        print(f"‚úÖ Register: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Token: {result['data']['token'][:20]}...")
            print(f"   User: {result['data']['user']['username']}")
            return result['data']['token']
        else:
            print(f"   Error: {response.json()}")
            return None
    except Exception as e:
        print(f"‚ùå Register failed: {e}")
        return None

def test_login():
    """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –≤—Ö–æ–¥...")
    try:
        data = {
            "username": username,
            "password": password
        }
        response = requests.post(f"{BASE_URL}/api/auth/login", json=data, proxies={'http': None, 'https': None})
        print(f"‚úÖ Login: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Token: {result['data']['token'][:20]}...")
            print(f"   User: {result['data']['user']['username']}")
            return result['data']['token']
        else:
            print(f"   Error: {response.json()}")
            return None
    except Exception as e:
        print(f"‚ùå Login failed: {e}")
        return None

def test_chats(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/api/chats", headers=headers, proxies={'http': None, 'https': None})
        print(f"‚úÖ Get chats: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Chats count: {len(result['data'])}")
            for chat in result['data']:
                print(f"   Chat ID: {chat['id']}, Users: {chat['user1']['username']} <-> {chat['user2']['username']}")
        else:
            print(f"   Error: {response.json()}")
    except Exception as e:
        print(f"‚ùå Get chats failed: {e}")

def test_messages(token):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(f"{BASE_URL}/api/chats/1/messages", headers=headers, proxies={'http': None, 'https': None})
        print(f"‚úÖ Get messages: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Messages count: {len(result['data'])}")
            for msg in result['data']:
                print(f"   Message: {msg['sender']['username']}: {msg['content']}")
        else:
            print(f"   Error: {response.json()}")
    except Exception as e:
        print(f"‚ùå Get messages failed: {e}")

def test_create_chat(token):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞...")
    try:
        headers = {"Authorization": f"Bearer {token}"}
        data = {"other_user_id": 2}
        response = requests.post(f"{BASE_URL}/api/chats", json=data, headers=headers, proxies={'http': None, 'https': None})
        print(f"‚úÖ Create chat: {response.status_code}")
        if response.status_code == 200:
            result = response.json()
            print(f"   Chat created: ID {result['data']['id']}")
        else:
            print(f"   Error: {response.json()}")
    except Exception as e:
        print(f"‚ùå Create chat failed: {e}")

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Tether Messenger")
    print("=" * 50)
    
    # –¢–µ—Å—Ç health check
    if not test_health():
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        return
    
    # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    token = test_register()
    if not token:
        print("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å!")
        return
    
    # –¢–µ—Å—Ç –≤—Ö–æ–¥–∞
    login_token = test_login()
    if not login_token:
        print("‚ùå –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è!")
        return
    
    # –¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints
    test_chats(token)
    test_messages(token)
    test_create_chat(token)
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    main()